// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cloudisk/biz/model/gorm_gen"
)

func newFile_User(db *gorm.DB, opts ...gen.DOOption) file_User {
	_file_User := file_User{}

	_file_User.file_UserDo.UseDB(db, opts...)
	_file_User.file_UserDo.UseModel(&gorm_gen.File_User{})

	tableName := _file_User.file_UserDo.TableName()
	_file_User.ALL = field.NewAsterisk(tableName)
	_file_User.ID = field.NewInt64(tableName, "id")
	_file_User.FileID = field.NewInt64(tableName, "file_id")
	_file_User.Userid = field.NewInt64(tableName, "userid")
	_file_User.Permission = field.NewInt32(tableName, "permission")
	_file_User.CreatedAt = field.NewTime(tableName, "created_at")
	_file_User.UpdatedAt = field.NewTime(tableName, "updated_at")

	_file_User.fillFieldMap()

	return _file_User
}

type file_User struct {
	file_UserDo

	ALL        field.Asterisk
	ID         field.Int64
	FileID     field.Int64 // 项目ID
	Userid     field.Int64 // 成员ID
	Permission field.Int32 // 权限：0只读，1读写
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (f file_User) Table(newTableName string) *file_User {
	f.file_UserDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f file_User) As(alias string) *file_User {
	f.file_UserDo.DO = *(f.file_UserDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *file_User) updateTableName(table string) *file_User {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FileID = field.NewInt64(table, "file_id")
	f.Userid = field.NewInt64(table, "userid")
	f.Permission = field.NewInt32(table, "permission")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *file_User) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *file_User) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["file_id"] = f.FileID
	f.fieldMap["userid"] = f.Userid
	f.fieldMap["permission"] = f.Permission
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f file_User) clone(db *gorm.DB) file_User {
	f.file_UserDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f file_User) replaceDB(db *gorm.DB) file_User {
	f.file_UserDo.ReplaceDB(db)
	return f
}

type file_UserDo struct{ gen.DO }

type IFile_UserDo interface {
	gen.SubQuery
	Debug() IFile_UserDo
	WithContext(ctx context.Context) IFile_UserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFile_UserDo
	WriteDB() IFile_UserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFile_UserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFile_UserDo
	Not(conds ...gen.Condition) IFile_UserDo
	Or(conds ...gen.Condition) IFile_UserDo
	Select(conds ...field.Expr) IFile_UserDo
	Where(conds ...gen.Condition) IFile_UserDo
	Order(conds ...field.Expr) IFile_UserDo
	Distinct(cols ...field.Expr) IFile_UserDo
	Omit(cols ...field.Expr) IFile_UserDo
	Join(table schema.Tabler, on ...field.Expr) IFile_UserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFile_UserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFile_UserDo
	Group(cols ...field.Expr) IFile_UserDo
	Having(conds ...gen.Condition) IFile_UserDo
	Limit(limit int) IFile_UserDo
	Offset(offset int) IFile_UserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFile_UserDo
	Unscoped() IFile_UserDo
	Create(values ...*gorm_gen.File_User) error
	CreateInBatches(values []*gorm_gen.File_User, batchSize int) error
	Save(values ...*gorm_gen.File_User) error
	First() (*gorm_gen.File_User, error)
	Take() (*gorm_gen.File_User, error)
	Last() (*gorm_gen.File_User, error)
	Find() ([]*gorm_gen.File_User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gorm_gen.File_User, err error)
	FindInBatches(result *[]*gorm_gen.File_User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gorm_gen.File_User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFile_UserDo
	Assign(attrs ...field.AssignExpr) IFile_UserDo
	Joins(fields ...field.RelationField) IFile_UserDo
	Preload(fields ...field.RelationField) IFile_UserDo
	FirstOrInit() (*gorm_gen.File_User, error)
	FirstOrCreate() (*gorm_gen.File_User, error)
	FindByPage(offset int, limit int) (result []*gorm_gen.File_User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFile_UserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f file_UserDo) Debug() IFile_UserDo {
	return f.withDO(f.DO.Debug())
}

func (f file_UserDo) WithContext(ctx context.Context) IFile_UserDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f file_UserDo) ReadDB() IFile_UserDo {
	return f.Clauses(dbresolver.Read)
}

func (f file_UserDo) WriteDB() IFile_UserDo {
	return f.Clauses(dbresolver.Write)
}

func (f file_UserDo) Session(config *gorm.Session) IFile_UserDo {
	return f.withDO(f.DO.Session(config))
}

func (f file_UserDo) Clauses(conds ...clause.Expression) IFile_UserDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f file_UserDo) Returning(value interface{}, columns ...string) IFile_UserDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f file_UserDo) Not(conds ...gen.Condition) IFile_UserDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f file_UserDo) Or(conds ...gen.Condition) IFile_UserDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f file_UserDo) Select(conds ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f file_UserDo) Where(conds ...gen.Condition) IFile_UserDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f file_UserDo) Order(conds ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f file_UserDo) Distinct(cols ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f file_UserDo) Omit(cols ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f file_UserDo) Join(table schema.Tabler, on ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f file_UserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f file_UserDo) RightJoin(table schema.Tabler, on ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f file_UserDo) Group(cols ...field.Expr) IFile_UserDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f file_UserDo) Having(conds ...gen.Condition) IFile_UserDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f file_UserDo) Limit(limit int) IFile_UserDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f file_UserDo) Offset(offset int) IFile_UserDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f file_UserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFile_UserDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f file_UserDo) Unscoped() IFile_UserDo {
	return f.withDO(f.DO.Unscoped())
}

func (f file_UserDo) Create(values ...*gorm_gen.File_User) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f file_UserDo) CreateInBatches(values []*gorm_gen.File_User, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f file_UserDo) Save(values ...*gorm_gen.File_User) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f file_UserDo) First() (*gorm_gen.File_User, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen.File_User), nil
	}
}

func (f file_UserDo) Take() (*gorm_gen.File_User, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen.File_User), nil
	}
}

func (f file_UserDo) Last() (*gorm_gen.File_User, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen.File_User), nil
	}
}

func (f file_UserDo) Find() ([]*gorm_gen.File_User, error) {
	result, err := f.DO.Find()
	return result.([]*gorm_gen.File_User), err
}

func (f file_UserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gorm_gen.File_User, err error) {
	buf := make([]*gorm_gen.File_User, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f file_UserDo) FindInBatches(result *[]*gorm_gen.File_User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f file_UserDo) Attrs(attrs ...field.AssignExpr) IFile_UserDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f file_UserDo) Assign(attrs ...field.AssignExpr) IFile_UserDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f file_UserDo) Joins(fields ...field.RelationField) IFile_UserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f file_UserDo) Preload(fields ...field.RelationField) IFile_UserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f file_UserDo) FirstOrInit() (*gorm_gen.File_User, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen.File_User), nil
	}
}

func (f file_UserDo) FirstOrCreate() (*gorm_gen.File_User, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen.File_User), nil
	}
}

func (f file_UserDo) FindByPage(offset int, limit int) (result []*gorm_gen.File_User, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f file_UserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f file_UserDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f file_UserDo) Delete(models ...*gorm_gen.File_User) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *file_UserDo) withDO(do gen.Dao) *file_UserDo {
	f.DO = *do.(*gen.DO)
	return f
}
